// Архивация файлов, используя коды Шеннона-Фaно или Хаффмaна.

begin
  {1. Открываем для чтения файл с кодовой таблицей}
  var КодТаб : Text;
  var ИмКодТаб := ReadlnString('Введите имя файла с кодовой таблицей ->');
  Reset(КодТаб, ИмКодТаб);

  Loop 5 do КодТаб.ReadlnString; {2. Пропускаем первые пять строк, содержащие размер файла, энтропию и другие данные}

  {2. Определяем имя архивируемого файла}
//  var ИмИсхФ := ИмКодТаб[:LastPos('.', ИмКодТаб)];
  WriteLn('Архивируется файл -> ', ИмКодТаб[:LastPos('.', ИмКодТаб)]);
  var ИсхФ, Арх  : file of Byte;
  Reset(ИсхФ, ИмКодТаб[:LastPos('.', ИмКодТаб)]);

  {3. Создаем файл для архива}
  WriteLn('Создаем архив -> ', ИмКодТаб + '.Арх');
  Rewrite(Арх, ИмКодТаб + '.Арх');
//  ReWrite(Арх);

  {4. Заполняем таблицу кодирования символов}
  var Табул : char;
  var j : integer;
  var Код := new String[256];
  repeat
    Readln(КодТаб, j, Табул, Код[j])
  until КодТаб.EoF;
  КодТаб.Close;

  var ИсхБ : byte; {5. Читаем байты из исходного файла }
  var РезБ : byte := 0;
  var Бит := 1;

  {6. Проходим по каждому байту исходного файла}
  repeat
    ИсхБ := ИсхФ.Read;
    for var i := 1 to Length(Код[ИсхБ]) do begin
      {7. Кодируем биты символов согласно кодовой таблице}
      if Код[ИсхБ][i] = '1' then РезБ += Бит;

      {8. Записываем байт в архив при достижении максимального бита}
      if Бит < 128 then Бит *= 2
      else begin
        Арх.Write(РезБ);
        РезБ := 0; 
        Бит := 1;
      end;

    end;
  until ИсхФ.EoF;

  {9. Записываем последний байт, если он не полностью заполнен}
  if Бит > 1 then Арх.Write(РезБ);
  
  ИсхФ.Close; Арх.Close;
  
end.