// Разархивация файлов, используя коды Шеннона-Фaно или Хаффмaна

begin
  {1. Открываем файл с кодовой таблицей}
  var КодТаб : Text;
  var ИмКодТаб := ReadlnString('Введите имя файла с кодовой таблицей ->');
  Reset(КодТаб, ИмКодТаб);

  {2. Открываем архив и создаем результирующий файл}
  var Арх, РезФ : file of byte;
  Reset(Арх, ИмКодТаб + '.Арх');
  Writeln('Обрабатывается архив -> ' + ИмКодТаб + '.Арх');
  Rewrite(РезФ, '(new)' + ИмКодТаб[:LastPos('.', ИмКодТаб)]);
  Writeln('Результирующий файл -> ' + '(new)' + ИмКодТаб[:LastPos('.', ИмКодТаб)]);

  {3. Читаем размер файла и пропускаем остальные данные в кодовой таблице}
  var РазмФ := КодТаб.ReadlnInteger;
  loop 4 do Readln(КодТаб);

  var Код := new string[256];

  {3. Заполняем таблицу кодирования символов}
  var Табул : char;
  var НомБ : integer;
  repeat
    Readln(КодТаб, НомБ, Табул, Код[НомБ])
  until КодТаб.EoF;
  КодТаб.Close;

  {4. Разархивируем данные}
  var СтрБит := '';
  var Разарх := 0;
  var ИсхБ, РезБ : byte;
  repeat
    ИсхБ := Арх.Read;
    loop 8 do begin
      {5. Читаем каждый бит и добавляем его к строке битов}
      СтрБит += (ИсхБ mod 2) = 0 ? '0' : '1';
      ИсхБ := ИсхБ div 2;

      {6. Проверяем, есть ли в таблице кодов соответствие для полученной строки битов}
      var ЗавершК := False; 
      for var Байт := 0 to 255 do
        if СтрБит = Код[Байт] then begin
          ЗавершК := True;
          РезБ := Байт;
          Break
        end;

      {7. Если найдено соответствие и количество разархивированных байт меньше размера исходного файла, записываем байт в результирующий файл}
      if ЗавершК and (Разарх < РазмФ) then begin
        РезФ.Write(РезБ); 
        СтрБит := ''; inc(Разарх)
      end
    end
  until Разарх = РазмФ;

  Close(РезФ); Close(Арх);
end.